#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest
from ipfs_common.ipfs_rosbag import IpfsRosBag


class WorkerNode:

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/ready', Liability, self.subscribe_and_start)

        rospy.wait_for_service('liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))

        rospy.loginfo('Worker node is launched')

    def subscribe_and_start(self, liability):
        rospy.loginfo("Starting process {}...".format(liability.address.address))

        prefix = '/liability/eth_' + liability.address.address
        pub_email = rospy.Publisher(prefix + "/email", String, queue_size=128)
        pub_info = rospy.Publisher(prefix + "/info", String, queue_size=128)
        pub_meta = rospy.Publisher(prefix + "/meta", String, queue_size=128)
        pub_images = rospy.Publisher(prefix + "/images/0", String, queue_size=128)

        self.liability_proxy.start(liability.address)

        rospy.sleep(2)  # allow all publishers to be registered

        rospy.loginfo("Downloading the objective [{}]".format(liability.objective.multihash))
        bag = IpfsRosBag(multihash=liability.objective)

        pub_email.publish(bag["/email"][0])
        pub_email.publish(bag["/info"][0])
        pub_email.publish(bag["/meta"][0])
        pub_email.publish(bag["/images/0"][0])

        # TODO pin to pinata

        rospy.sleep(2)  # allow publishers to publish data

        rospy.loginfo("Finishing...")

        self.liability_proxy.finish(liability.address, True)

        pub_email.unregister()
        pub_info.unregister()
        pub_meta.unregister()
        pub_images.unregister()

        rospy.loginfo("The task {} is done".format(liability.address.address))

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    WorkerNode().spin()
