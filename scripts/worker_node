#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Standart, System and Third party
from collections import namedtuple

# ROS
import rospy
from std_msgs.msg import String

# AIRA
from robonomics_liability.msg import Liability
from robonomics_liability.srv import StartLiability, StartLiabilityRequest
from robonomics_liability.srv import FinishLiability, FinishLiabilityRequest
from robonomics_msgs.msg import Result
from ipfs_common.ipfs_rosbag import IpfsRosBag

from pinatapy import PinataPy


class WorkerNode:

    def __init__(self):
        rospy.init_node('worker')
        rospy.loginfo('Launching worker node...')

        rospy.Subscriber('/liability/ready', Liability, self.subscribe_and_start)
        rospy.Subscriber("/liability/infochan/eth/sending/result", Result, self.pin_result)

        rospy.wait_for_service('liability/finish')

        self.liability_proxy = namedtuple('liability_srvs_proxy', ['start', 'finish'])(
                                          rospy.ServiceProxy('liability/start', StartLiability),
                                          rospy.ServiceProxy('liability/finish', FinishLiability))

        self.pinata = PinataPy(rospy.get_param("~pinata_api_key"), rospy.get_param("~pinata_secret_api_key"))

        rospy.loginfo('Worker node is launched')

    def subscribe_and_start(self, liability):
        rospy.loginfo("Starting process {}...".format(liability.address.address))

        self.liability_proxy.start(liability.address)

        rospy.sleep(2)  # allow all publishers to be registered

        rospy.loginfo("Downloading the objective [{}]".format(liability.objective.multihash))
        bag = IpfsRosBag(multihash=liability.objective).messages

        self.pin_file_to_ipfs(bag)

        rospy.sleep(2)  # allow publishers to publish data

        rospy.loginfo("Finishing...")

        self.liability_proxy.finish(liability.address, True)

        rospy.loginfo("The task {} is done".format(liability.address.address))

    def pin_result(self, result: Result):
        self.pinata.add_hash_to_pin_queue(result.result.multihash)

    def pin_file_to_ipfs(self, bag: dict):
        self.pinata.add_hash_to_pin_queue(bag["/meta"][0].data)
        for i in bag["/images"]:
            self.pinata.add_hash_to_pin_queue(i.data)

    def spin(self):
        rospy.spin()


if __name__ == '__main__':
    WorkerNode().spin()
